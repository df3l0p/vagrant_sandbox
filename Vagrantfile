# DO NOT EDIT THIS FILE
# VM settings are available under config/targets.yaml
require 'yaml'

# source: https://stackoverflow.com/questions/16708917/how-do-i-include-variables-in-my-vagrantfile/26394449
current_dir = File.dirname(File.expand_path(__FILE__))
configs     = YAML.load_file("#{current_dir}/config/targets.yaml")
targets     = configs['targets']

# Module used to identify host OS 
module OS
    def OS.windows?
        (/cygwin|mswin|mingw|bccwin|wince|emx/ =~ RUBY_PLATFORM) != nil
    end

    def OS.mac?
        (/darwin/ =~ RUBY_PLATFORM) != nil
    end

    def OS.unix?
        !OS.windows?
    end

    def OS.linux?
        OS.unix? and not OS.mac?
    end
end

# handling specifig hosts variables
audio_driver = ''
if OS.linux?
    audio_driver = 'pulse'
    vboxguest_path = '/usr/share/virtualbox/VBoxGuestAdditions.iso'
elsif OS.mac?
    audio_driver = 'coreaudio'
    vboxguest_path = '/Applications/VirtualBox.app/Contents/MacOS/VBoxGuestAdditions.iso'
    parallels_path = '/Applications/Parallels Desktop.app/Contents/Resources/Tools/prl-tools-lin-arm.iso'
elsif OS.windows?
    audio_driver = 'dsound'
    vboxguest_path = 'C:\Program files\Oracle\VirtualBox\VBoxGuestAdditions.iso'
end

Vagrant.configure("2") do |config|
    # Loop trough each target
    targets&.each do |name, target|
        config.vm.define name do |build|
            build.vm.provider "parallels" do |prl, override|
                override.vm.box = target.fetch("parallels", {}).fetch("box")
                if not target.fetch("parallels", {}).fetch("version", "").empty?
                    override.vm.box_version = target.fetch("parallels", {}).fetch("version", "")
                end
                prl.name = name

                # Check if CPUs are defined
                if target["cpus"]
                    prl.cpus = target["cpus"]
                end
                # Check if memory is defined
                if target["memory"]
                    prl.memory = target["memory"]
                end
                prl.update_guest_tools = true

                prl.customize "pre-boot", ["set", :id, "--device-set", "sound0", "--disable", "--disconnect"]
                prl.customize "pre-boot", ["set", :id, "--device-set", "cdrom0", "--image", parallels_path, "--connect"]
                prl.customize "pre-boot", ["set", :id, "--sync-host-printers", "off"]
                prl.customize "pre-boot", ["set", :id, "--auto-share-camera", "off"]
                prl.customize "pre-boot", ["set", :id, "--tools-autoupdate", "on"]
            end

            build.vm.provider :virtualbox do |vb, override|
                override.vm.box = target.fetch("virtualbox", {})["box"]
                if not target.fetch("virtualbox", {}).fetch("version", "").empty?
                    override.vm.box_version = target.fetch("virtualbox", {}).fetch("version", "")
                end
                vb.name = name

                # Check if CPUs are defined
                if target["cpus"]
                    vb.cpus = target["cpus"]
                end
                # Check if memory is defined
                if target["memory"]
                    vb.memory = target["memory"]
                end
                # Check if vram is defined
                if target["vram"]
                    vb.customize ["modifyvm", :id, "--vram", target["vram"]]
                end
                
                vb.gui = target["gui"]
                # set the right graphics on linux
                if OS.linux?
                    vb.customize ["modifyvm", :id, "--graphicscontroller", "vmsvga"]
                end

                # enables copy/paste with host and vm
                vb.customize ["modifyvm", :id, "--clipboard", "bidirectional"]

                # Setups audio
                if target["reqAudio"]
                    vb.customize [
                        "modifyvm", :id, 
                        "--audio", audio_driver,
                        "--audiocontroller", "ac97",
                        "--audioout", "on"
                    ]
                end
                if target["installGuest"]
                    # creates SATA controller, disk and attaches ISO to it.
                    vb.customize ["storagectl", :id, "--name", "SATA Controller", "--add", "sata"]
                    vb.customize ["storageattach", :id, "--storagectl", "SATA Controller", "--port", "1", "--device", "0", "--type", "dvddrive", "--medium", vboxguest_path]
                    override.vm.provision "ansible" do |ansible|
                        ansible.playbook = "res/ansible/vboxguest.yml"
                    end
                end
            end

            # Test if ip is provided
            if not target.fetch("ip", "").empty?
                build.vm.network "private_network", ip: target["ip"]
            end

            # loops through all playbooks and execute it with right supplier.
            target["playbooks"]&.each do |playbook|
                build.vm.provision playbook["supplier"] do |ansible|
                    ansible.playbook = playbook["path"]
                    # ansible_local does not support vault pass.
                    if playbook["supplier"] != "ansible_local"
                      ansible.ask_vault_pass = playbook["ask_vault_pass"]
                    end
                end
            end
        end
    end
end
